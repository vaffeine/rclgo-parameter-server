// Code generated by rclgo-gen. DO NOT EDIT.

package rcl_interfaces_msg
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	primitives "github.com/tiiuae/rclgo/pkg/rclgo/primitives"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rcl_interfaces/msg/parameter_value.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("rcl_interfaces/ParameterValue", ParameterValueTypeSupport)
	typemap.RegisterMessage("rcl_interfaces/msg/ParameterValue", ParameterValueTypeSupport)
}

type ParameterValue struct {
	Type uint8 `yaml:"type"`// The type of this parameter, which corresponds to the appropriate field below.
	BoolValue bool `yaml:"bool_value"`// Boolean value, can be either true or false.
	IntegerValue int64 `yaml:"integer_value"`// Integer value ranging from -9,223,372,036,854,775,808 to9,223,372,036,854,775,807.
	DoubleValue float64 `yaml:"double_value"`// A double precision floating point value following IEEE 754.
	StringValue string `yaml:"string_value"`// A textual value with no practical length limit.
	ByteArrayValue []byte `yaml:"byte_array_value"`// An array of bytes, used for non-textual information.
	BoolArrayValue []bool `yaml:"bool_array_value"`// An array of boolean values.
	IntegerArrayValue []int64 `yaml:"integer_array_value"`// An array of 64-bit integer values.
	DoubleArrayValue []float64 `yaml:"double_array_value"`// An array of 64-bit floating point values.
	StringArrayValue []string `yaml:"string_array_value"`// An array of string values.
}

// NewParameterValue creates a new ParameterValue with default values.
func NewParameterValue() *ParameterValue {
	self := ParameterValue{}
	self.SetDefaults()
	return &self
}

func (t *ParameterValue) Clone() *ParameterValue {
	c := &ParameterValue{}
	c.Type = t.Type
	c.BoolValue = t.BoolValue
	c.IntegerValue = t.IntegerValue
	c.DoubleValue = t.DoubleValue
	c.StringValue = t.StringValue
	if t.ByteArrayValue != nil {
		c.ByteArrayValue = make([]byte, len(t.ByteArrayValue))
		copy(c.ByteArrayValue, t.ByteArrayValue)
	}
	if t.BoolArrayValue != nil {
		c.BoolArrayValue = make([]bool, len(t.BoolArrayValue))
		copy(c.BoolArrayValue, t.BoolArrayValue)
	}
	if t.IntegerArrayValue != nil {
		c.IntegerArrayValue = make([]int64, len(t.IntegerArrayValue))
		copy(c.IntegerArrayValue, t.IntegerArrayValue)
	}
	if t.DoubleArrayValue != nil {
		c.DoubleArrayValue = make([]float64, len(t.DoubleArrayValue))
		copy(c.DoubleArrayValue, t.DoubleArrayValue)
	}
	if t.StringArrayValue != nil {
		c.StringArrayValue = make([]string, len(t.StringArrayValue))
		copy(c.StringArrayValue, t.StringArrayValue)
	}
	return c
}

func (t *ParameterValue) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ParameterValue) SetDefaults() {
	t.Type = 0
	t.BoolValue = false
	t.IntegerValue = 0
	t.DoubleValue = 0
	t.StringValue = ""
	t.ByteArrayValue = nil
	t.BoolArrayValue = nil
	t.IntegerArrayValue = nil
	t.DoubleArrayValue = nil
	t.StringArrayValue = nil
}

func (t *ParameterValue) GetTypeSupport() types.MessageTypeSupport {
	return ParameterValueTypeSupport
}

// ParameterValuePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ParameterValuePublisher struct {
	*rclgo.Publisher
}

// NewParameterValuePublisher creates and returns a new publisher for the
// ParameterValue
func NewParameterValuePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ParameterValuePublisher, error) {
	pub, err := node.NewPublisher(topic_name, ParameterValueTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ParameterValuePublisher{pub}, nil
}

func (p *ParameterValuePublisher) Publish(msg *ParameterValue) error {
	return p.Publisher.Publish(msg)
}

// ParameterValueSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ParameterValueSubscription struct {
	*rclgo.Subscription
}

// ParameterValueSubscriptionCallback type is used to provide a subscription
// handler function for a ParameterValueSubscription.
type ParameterValueSubscriptionCallback func(msg *ParameterValue, info *rclgo.MessageInfo, err error)

// NewParameterValueSubscription creates and returns a new subscription for the
// ParameterValue
func NewParameterValueSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ParameterValueSubscriptionCallback) (*ParameterValueSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ParameterValue
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ParameterValueTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ParameterValueSubscription{sub}, nil
}

func (s *ParameterValueSubscription) TakeMessage(out *ParameterValue) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneParameterValueSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneParameterValueSlice(dst, src []ParameterValue) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ParameterValueTypeSupport types.MessageTypeSupport = _ParameterValueTypeSupport{}

type _ParameterValueTypeSupport struct{}

func (t _ParameterValueTypeSupport) New() types.Message {
	return NewParameterValue()
}

func (t _ParameterValueTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rcl_interfaces__msg__ParameterValue
	return (unsafe.Pointer)(C.rcl_interfaces__msg__ParameterValue__create())
}

func (t _ParameterValueTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rcl_interfaces__msg__ParameterValue__destroy((*C.rcl_interfaces__msg__ParameterValue)(pointer_to_free))
}

func (t _ParameterValueTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ParameterValue)
	mem := (*C.rcl_interfaces__msg__ParameterValue)(dst)
	mem._type = C.uint8_t(m.Type)
	mem.bool_value = C.bool(m.BoolValue)
	mem.integer_value = C.int64_t(m.IntegerValue)
	mem.double_value = C.double(m.DoubleValue)
	primitives.StringAsCStruct(unsafe.Pointer(&mem.string_value), m.StringValue)
	primitives.Byte__Sequence_to_C((*primitives.CByte__Sequence)(unsafe.Pointer(&mem.byte_array_value)), m.ByteArrayValue)
	primitives.Bool__Sequence_to_C((*primitives.CBool__Sequence)(unsafe.Pointer(&mem.bool_array_value)), m.BoolArrayValue)
	primitives.Int64__Sequence_to_C((*primitives.CInt64__Sequence)(unsafe.Pointer(&mem.integer_array_value)), m.IntegerArrayValue)
	primitives.Float64__Sequence_to_C((*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.double_array_value)), m.DoubleArrayValue)
	primitives.String__Sequence_to_C((*primitives.CString__Sequence)(unsafe.Pointer(&mem.string_array_value)), m.StringArrayValue)
}

func (t _ParameterValueTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ParameterValue)
	mem := (*C.rcl_interfaces__msg__ParameterValue)(ros2_message_buffer)
	m.Type = uint8(mem._type)
	m.BoolValue = bool(mem.bool_value)
	m.IntegerValue = int64(mem.integer_value)
	m.DoubleValue = float64(mem.double_value)
	primitives.StringAsGoStruct(&m.StringValue, unsafe.Pointer(&mem.string_value))
	primitives.Byte__Sequence_to_Go(&m.ByteArrayValue, *(*primitives.CByte__Sequence)(unsafe.Pointer(&mem.byte_array_value)))
	primitives.Bool__Sequence_to_Go(&m.BoolArrayValue, *(*primitives.CBool__Sequence)(unsafe.Pointer(&mem.bool_array_value)))
	primitives.Int64__Sequence_to_Go(&m.IntegerArrayValue, *(*primitives.CInt64__Sequence)(unsafe.Pointer(&mem.integer_array_value)))
	primitives.Float64__Sequence_to_Go(&m.DoubleArrayValue, *(*primitives.CFloat64__Sequence)(unsafe.Pointer(&mem.double_array_value)))
	primitives.String__Sequence_to_Go(&m.StringArrayValue, *(*primitives.CString__Sequence)(unsafe.Pointer(&mem.string_array_value)))
}

func (t _ParameterValueTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__msg__ParameterValue())
}

type CParameterValue = C.rcl_interfaces__msg__ParameterValue
type CParameterValue__Sequence = C.rcl_interfaces__msg__ParameterValue__Sequence

func ParameterValue__Sequence_to_Go(goSlice *[]ParameterValue, cSlice CParameterValue__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ParameterValue, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ParameterValueTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ParameterValue__Sequence_to_C(cSlice *CParameterValue__Sequence, goSlice []ParameterValue) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rcl_interfaces__msg__ParameterValue)(C.malloc(C.sizeof_struct_rcl_interfaces__msg__ParameterValue * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ParameterValueTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ParameterValue__Array_to_Go(goSlice []ParameterValue, cSlice []CParameterValue) {
	for i := 0; i < len(cSlice); i++ {
		ParameterValueTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ParameterValue__Array_to_C(cSlice []CParameterValue, goSlice []ParameterValue) {
	for i := 0; i < len(goSlice); i++ {
		ParameterValueTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
