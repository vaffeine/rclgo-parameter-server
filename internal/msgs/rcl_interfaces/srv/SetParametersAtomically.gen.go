// Code generated by rclgo-gen. DO NOT EDIT.

package rcl_interfaces_srv

/*
#include <rosidl_runtime_c/message_type_support_struct.h>
#include <rcl_interfaces/srv/set_parameters_atomically.h>
*/
import "C"

import (
	"context"
	"errors"
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
)

func init() {
	typemap.RegisterService("rcl_interfaces/SetParametersAtomically", SetParametersAtomicallyTypeSupport)
	typemap.RegisterService("rcl_interfaces/srv/SetParametersAtomically", SetParametersAtomicallyTypeSupport)
}

type _SetParametersAtomicallyTypeSupport struct {}

func (s _SetParametersAtomicallyTypeSupport) Request() types.MessageTypeSupport {
	return SetParametersAtomically_RequestTypeSupport
}

func (s _SetParametersAtomicallyTypeSupport) Response() types.MessageTypeSupport {
	return SetParametersAtomically_ResponseTypeSupport
}

func (s _SetParametersAtomicallyTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_service_type_support_handle__rcl_interfaces__srv__SetParametersAtomically())
}

// Modifying this variable is undefined behavior.
var SetParametersAtomicallyTypeSupport types.ServiceTypeSupport = _SetParametersAtomicallyTypeSupport{}

// SetParametersAtomicallyClient wraps rclgo.Client to provide type safe helper
// functions
type SetParametersAtomicallyClient struct {
	*rclgo.Client
}

// NewSetParametersAtomicallyClient creates and returns a new client for the
// SetParametersAtomically
func NewSetParametersAtomicallyClient(node *rclgo.Node, serviceName string, options *rclgo.ClientOptions) (*SetParametersAtomicallyClient, error) {
	client, err := node.NewClient(serviceName, SetParametersAtomicallyTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &SetParametersAtomicallyClient{client}, nil
}

func (s *SetParametersAtomicallyClient) Send(ctx context.Context, req *SetParametersAtomically_Request) (*SetParametersAtomically_Response, *rclgo.ServiceInfo, error) {
	msg, rmw, err := s.Client.Send(ctx, req)
	if err != nil {
		return nil, rmw, err
	}
	typedMessage, ok := msg.(*SetParametersAtomically_Response)
	if !ok {
		return nil, rmw, errors.New("invalid message type returned")
	}
	return typedMessage, rmw, err
}

type SetParametersAtomicallyServiceResponseSender struct {
	sender rclgo.ServiceResponseSender
}

func (s SetParametersAtomicallyServiceResponseSender) SendResponse(resp *SetParametersAtomically_Response) error {
	return s.sender.SendResponse(resp)
}

type SetParametersAtomicallyServiceRequestHandler func(*rclgo.ServiceInfo, *SetParametersAtomically_Request, SetParametersAtomicallyServiceResponseSender)

// SetParametersAtomicallyService wraps rclgo.Service to provide type safe helper
// functions
type SetParametersAtomicallyService struct {
	*rclgo.Service
}

// NewSetParametersAtomicallyService creates and returns a new service for the
// SetParametersAtomically
func NewSetParametersAtomicallyService(node *rclgo.Node, name string, options *rclgo.ServiceOptions, handler SetParametersAtomicallyServiceRequestHandler) (*SetParametersAtomicallyService, error) {
	h := func(rmw *rclgo.ServiceInfo, msg types.Message, rs rclgo.ServiceResponseSender) {
		m := msg.(*SetParametersAtomically_Request)
		responseSender := SetParametersAtomicallyServiceResponseSender{sender: rs} 
		handler(rmw, m, responseSender)
	}
	service, err := node.NewService(name, SetParametersAtomicallyTypeSupport, options, h)
	if err != nil {
		return nil, err
	}
	return &SetParametersAtomicallyService{service}, nil
}