// Code generated by rclgo-gen. DO NOT EDIT.

package rcl_interfaces_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	rcl_interfaces_msg "github.com/vaffeine/rclgo-parameter-server/internal/msgs/rcl_interfaces/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rcl_interfaces/srv/list_parameters.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("rcl_interfaces/ListParameters_Response", ListParameters_ResponseTypeSupport)
	typemap.RegisterMessage("rcl_interfaces/srv/ListParameters_Response", ListParameters_ResponseTypeSupport)
}

type ListParameters_Response struct {
	Result rcl_interfaces_msg.ListParametersResult `yaml:"result"`// The list of parameter names and their prefixes.
}

// NewListParameters_Response creates a new ListParameters_Response with default values.
func NewListParameters_Response() *ListParameters_Response {
	self := ListParameters_Response{}
	self.SetDefaults()
	return &self
}

func (t *ListParameters_Response) Clone() *ListParameters_Response {
	c := &ListParameters_Response{}
	c.Result = *t.Result.Clone()
	return c
}

func (t *ListParameters_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *ListParameters_Response) SetDefaults() {
	t.Result.SetDefaults()
}

func (t *ListParameters_Response) GetTypeSupport() types.MessageTypeSupport {
	return ListParameters_ResponseTypeSupport
}

// ListParameters_ResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type ListParameters_ResponsePublisher struct {
	*rclgo.Publisher
}

// NewListParameters_ResponsePublisher creates and returns a new publisher for the
// ListParameters_Response
func NewListParameters_ResponsePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*ListParameters_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topic_name, ListParameters_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &ListParameters_ResponsePublisher{pub}, nil
}

func (p *ListParameters_ResponsePublisher) Publish(msg *ListParameters_Response) error {
	return p.Publisher.Publish(msg)
}

// ListParameters_ResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type ListParameters_ResponseSubscription struct {
	*rclgo.Subscription
}

// ListParameters_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a ListParameters_ResponseSubscription.
type ListParameters_ResponseSubscriptionCallback func(msg *ListParameters_Response, info *rclgo.MessageInfo, err error)

// NewListParameters_ResponseSubscription creates and returns a new subscription for the
// ListParameters_Response
func NewListParameters_ResponseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback ListParameters_ResponseSubscriptionCallback) (*ListParameters_ResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg ListParameters_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, ListParameters_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &ListParameters_ResponseSubscription{sub}, nil
}

func (s *ListParameters_ResponseSubscription) TakeMessage(out *ListParameters_Response) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneListParameters_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneListParameters_ResponseSlice(dst, src []ListParameters_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var ListParameters_ResponseTypeSupport types.MessageTypeSupport = _ListParameters_ResponseTypeSupport{}

type _ListParameters_ResponseTypeSupport struct{}

func (t _ListParameters_ResponseTypeSupport) New() types.Message {
	return NewListParameters_Response()
}

func (t _ListParameters_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rcl_interfaces__srv__ListParameters_Response
	return (unsafe.Pointer)(C.rcl_interfaces__srv__ListParameters_Response__create())
}

func (t _ListParameters_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rcl_interfaces__srv__ListParameters_Response__destroy((*C.rcl_interfaces__srv__ListParameters_Response)(pointer_to_free))
}

func (t _ListParameters_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*ListParameters_Response)
	mem := (*C.rcl_interfaces__srv__ListParameters_Response)(dst)
	rcl_interfaces_msg.ListParametersResultTypeSupport.AsCStruct(unsafe.Pointer(&mem.result), &m.Result)
}

func (t _ListParameters_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*ListParameters_Response)
	mem := (*C.rcl_interfaces__srv__ListParameters_Response)(ros2_message_buffer)
	rcl_interfaces_msg.ListParametersResultTypeSupport.AsGoStruct(&m.Result, unsafe.Pointer(&mem.result))
}

func (t _ListParameters_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__ListParameters_Response())
}

type CListParameters_Response = C.rcl_interfaces__srv__ListParameters_Response
type CListParameters_Response__Sequence = C.rcl_interfaces__srv__ListParameters_Response__Sequence

func ListParameters_Response__Sequence_to_Go(goSlice *[]ListParameters_Response, cSlice CListParameters_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]ListParameters_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		ListParameters_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func ListParameters_Response__Sequence_to_C(cSlice *CListParameters_Response__Sequence, goSlice []ListParameters_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rcl_interfaces__srv__ListParameters_Response)(C.malloc(C.sizeof_struct_rcl_interfaces__srv__ListParameters_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		ListParameters_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func ListParameters_Response__Array_to_Go(goSlice []ListParameters_Response, cSlice []CListParameters_Response) {
	for i := 0; i < len(cSlice); i++ {
		ListParameters_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func ListParameters_Response__Array_to_C(cSlice []CListParameters_Response, goSlice []ListParameters_Response) {
	for i := 0; i < len(goSlice); i++ {
		ListParameters_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
