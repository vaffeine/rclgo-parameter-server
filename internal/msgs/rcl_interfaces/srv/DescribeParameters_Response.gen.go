// Code generated by rclgo-gen. DO NOT EDIT.

package rcl_interfaces_srv
import (
	"unsafe"

	"github.com/tiiuae/rclgo/pkg/rclgo"
	"github.com/tiiuae/rclgo/pkg/rclgo/types"
	"github.com/tiiuae/rclgo/pkg/rclgo/typemap"
	rcl_interfaces_msg "github.com/vaffeine/rclgo-parameter-server/internal/msgs/rcl_interfaces/msg"
	
)
/*
#include <rosidl_runtime_c/message_type_support_struct.h>

#include <rcl_interfaces/srv/describe_parameters.h>

*/
import "C"

func init() {
	typemap.RegisterMessage("rcl_interfaces/DescribeParameters_Response", DescribeParameters_ResponseTypeSupport)
	typemap.RegisterMessage("rcl_interfaces/srv/DescribeParameters_Response", DescribeParameters_ResponseTypeSupport)
}

type DescribeParameters_Response struct {
	Descriptors []rcl_interfaces_msg.ParameterDescriptor `yaml:"descriptors"`// A list of the descriptors of all parameters requested in the same orderas they were requested. This list has the same length as the list ofparameters requested.
}

// NewDescribeParameters_Response creates a new DescribeParameters_Response with default values.
func NewDescribeParameters_Response() *DescribeParameters_Response {
	self := DescribeParameters_Response{}
	self.SetDefaults()
	return &self
}

func (t *DescribeParameters_Response) Clone() *DescribeParameters_Response {
	c := &DescribeParameters_Response{}
	if t.Descriptors != nil {
		c.Descriptors = make([]rcl_interfaces_msg.ParameterDescriptor, len(t.Descriptors))
		rcl_interfaces_msg.CloneParameterDescriptorSlice(c.Descriptors, t.Descriptors)
	}
	return c
}

func (t *DescribeParameters_Response) CloneMsg() types.Message {
	return t.Clone()
}

func (t *DescribeParameters_Response) SetDefaults() {
	t.Descriptors = nil
}

func (t *DescribeParameters_Response) GetTypeSupport() types.MessageTypeSupport {
	return DescribeParameters_ResponseTypeSupport
}

// DescribeParameters_ResponsePublisher wraps rclgo.Publisher to provide type safe helper
// functions
type DescribeParameters_ResponsePublisher struct {
	*rclgo.Publisher
}

// NewDescribeParameters_ResponsePublisher creates and returns a new publisher for the
// DescribeParameters_Response
func NewDescribeParameters_ResponsePublisher(node *rclgo.Node, topic_name string, options *rclgo.PublisherOptions) (*DescribeParameters_ResponsePublisher, error) {
	pub, err := node.NewPublisher(topic_name, DescribeParameters_ResponseTypeSupport, options)
	if err != nil {
		return nil, err
	}
	return &DescribeParameters_ResponsePublisher{pub}, nil
}

func (p *DescribeParameters_ResponsePublisher) Publish(msg *DescribeParameters_Response) error {
	return p.Publisher.Publish(msg)
}

// DescribeParameters_ResponseSubscription wraps rclgo.Subscription to provide type safe helper
// functions
type DescribeParameters_ResponseSubscription struct {
	*rclgo.Subscription
}

// DescribeParameters_ResponseSubscriptionCallback type is used to provide a subscription
// handler function for a DescribeParameters_ResponseSubscription.
type DescribeParameters_ResponseSubscriptionCallback func(msg *DescribeParameters_Response, info *rclgo.MessageInfo, err error)

// NewDescribeParameters_ResponseSubscription creates and returns a new subscription for the
// DescribeParameters_Response
func NewDescribeParameters_ResponseSubscription(node *rclgo.Node, topic_name string, opts *rclgo.SubscriptionOptions, subscriptionCallback DescribeParameters_ResponseSubscriptionCallback) (*DescribeParameters_ResponseSubscription, error) {
	callback := func(s *rclgo.Subscription) {
		var msg DescribeParameters_Response
		info, err := s.TakeMessage(&msg)
		subscriptionCallback(&msg, info, err)
	}
	sub, err := node.NewSubscription(topic_name, DescribeParameters_ResponseTypeSupport, opts, callback)
	if err != nil {
		return nil, err
	}
	return &DescribeParameters_ResponseSubscription{sub}, nil
}

func (s *DescribeParameters_ResponseSubscription) TakeMessage(out *DescribeParameters_Response) (*rclgo.MessageInfo, error) {
	return s.Subscription.TakeMessage(out)
}

// CloneDescribeParameters_ResponseSlice clones src to dst by calling Clone for each element in
// src. Panics if len(dst) < len(src).
func CloneDescribeParameters_ResponseSlice(dst, src []DescribeParameters_Response) {
	for i := range src {
		dst[i] = *src[i].Clone()
	}
}

// Modifying this variable is undefined behavior.
var DescribeParameters_ResponseTypeSupport types.MessageTypeSupport = _DescribeParameters_ResponseTypeSupport{}

type _DescribeParameters_ResponseTypeSupport struct{}

func (t _DescribeParameters_ResponseTypeSupport) New() types.Message {
	return NewDescribeParameters_Response()
}

func (t _DescribeParameters_ResponseTypeSupport) PrepareMemory() unsafe.Pointer { //returns *C.rcl_interfaces__srv__DescribeParameters_Response
	return (unsafe.Pointer)(C.rcl_interfaces__srv__DescribeParameters_Response__create())
}

func (t _DescribeParameters_ResponseTypeSupport) ReleaseMemory(pointer_to_free unsafe.Pointer) {
	C.rcl_interfaces__srv__DescribeParameters_Response__destroy((*C.rcl_interfaces__srv__DescribeParameters_Response)(pointer_to_free))
}

func (t _DescribeParameters_ResponseTypeSupport) AsCStruct(dst unsafe.Pointer, msg types.Message) {
	m := msg.(*DescribeParameters_Response)
	mem := (*C.rcl_interfaces__srv__DescribeParameters_Response)(dst)
	rcl_interfaces_msg.ParameterDescriptor__Sequence_to_C((*rcl_interfaces_msg.CParameterDescriptor__Sequence)(unsafe.Pointer(&mem.descriptors)), m.Descriptors)
}

func (t _DescribeParameters_ResponseTypeSupport) AsGoStruct(msg types.Message, ros2_message_buffer unsafe.Pointer) {
	m := msg.(*DescribeParameters_Response)
	mem := (*C.rcl_interfaces__srv__DescribeParameters_Response)(ros2_message_buffer)
	rcl_interfaces_msg.ParameterDescriptor__Sequence_to_Go(&m.Descriptors, *(*rcl_interfaces_msg.CParameterDescriptor__Sequence)(unsafe.Pointer(&mem.descriptors)))
}

func (t _DescribeParameters_ResponseTypeSupport) TypeSupport() unsafe.Pointer {
	return unsafe.Pointer(C.rosidl_typesupport_c__get_message_type_support_handle__rcl_interfaces__srv__DescribeParameters_Response())
}

type CDescribeParameters_Response = C.rcl_interfaces__srv__DescribeParameters_Response
type CDescribeParameters_Response__Sequence = C.rcl_interfaces__srv__DescribeParameters_Response__Sequence

func DescribeParameters_Response__Sequence_to_Go(goSlice *[]DescribeParameters_Response, cSlice CDescribeParameters_Response__Sequence) {
	if cSlice.size == 0 {
		return
	}
	*goSlice = make([]DescribeParameters_Response, cSlice.size)
	src := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range src {
		DescribeParameters_ResponseTypeSupport.AsGoStruct(&(*goSlice)[i], unsafe.Pointer(&src[i]))
	}
}
func DescribeParameters_Response__Sequence_to_C(cSlice *CDescribeParameters_Response__Sequence, goSlice []DescribeParameters_Response) {
	if len(goSlice) == 0 {
		cSlice.data = nil
		cSlice.capacity = 0
		cSlice.size = 0
		return
	}
	cSlice.data = (*C.rcl_interfaces__srv__DescribeParameters_Response)(C.malloc(C.sizeof_struct_rcl_interfaces__srv__DescribeParameters_Response * C.size_t(len(goSlice))))
	cSlice.capacity = C.size_t(len(goSlice))
	cSlice.size = cSlice.capacity
	dst := unsafe.Slice(cSlice.data, cSlice.size)
	for i := range goSlice {
		DescribeParameters_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&dst[i]), &goSlice[i])
	}
}
func DescribeParameters_Response__Array_to_Go(goSlice []DescribeParameters_Response, cSlice []CDescribeParameters_Response) {
	for i := 0; i < len(cSlice); i++ {
		DescribeParameters_ResponseTypeSupport.AsGoStruct(&goSlice[i], unsafe.Pointer(&cSlice[i]))
	}
}
func DescribeParameters_Response__Array_to_C(cSlice []CDescribeParameters_Response, goSlice []DescribeParameters_Response) {
	for i := 0; i < len(goSlice); i++ {
		DescribeParameters_ResponseTypeSupport.AsCStruct(unsafe.Pointer(&cSlice[i]), &goSlice[i])
	}
}
